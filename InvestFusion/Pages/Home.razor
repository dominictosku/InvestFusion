@page "/"
@using InvestFusion.Core.Entities
@using InvestFusion.Core.Entities.Enums
@using InvestFusion.Core.Interfaces
@using InvestFusion.Core.Services
@using Microsoft.Extensions.Logging
@inject IExcelService ExcelService;
@inject ILogger<Home> Logger;

<PageTitle>Home</PageTitle>

<h3>Aktien Statistik</h3>
<div class="col-md-6 p-3">
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Wähle eine Datei für die Berechnung aus.</RadzenText>
        <RadzenUpload Change=@HandleFileSelected class="w-100"
                      ChooseText="Auswählen"
                      InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})" />
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenLabel Text="Broker auswählen" Component="Broker" />
            <RadzenDropDown @bind-Value=@SelectedBroker Data="@(Enum.GetValues(typeof(SupportedBroker)).Cast<Enum>())" Style="width: 100%; max-width: 400px;" Name="Broker" />
        </RadzenStack>
        <RadzenButton Text="Upload" Click=@(args => UploadFile(SelectedBroker)) class="rz-mt-4" />
    </RadzenCard>
</div>

@if (BrokerStocks != null && BrokerStocks.Any())
{
	<RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex=@selectedIndex>
		<Tabs>
			@foreach (var brokerStock in BrokerStocks)
			{
                <RadzenTabsItem Text="@brokerStock.Name">
					<ExcelTable BrokerStocks="brokerStock" />
				</RadzenTabsItem>
			}
		</Tabs>
	</RadzenTabs>

}
else
{
	<div>Keine Einträge vorhanden</div>
}

<style>
    #ddUpload {
        left: 0;
    }

        #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
            width: 100%;
            text-align: center;
            font-size: 16px;
            border-radius: 0;
        }
</style>


@code {
    private List<BrokerWallet>? BrokerStocks;
    private SupportedBroker SelectedBroker;
    private FileInfo? CurrentUpload;
    private string? errorMessage;
    int selectedIndex = 0;

    private void HandleFileSelected(UploadChangeEventArgs args)
    {
        if (args.Files.Any())
            CurrentUpload = args.Files.First();
    }

    private async Task UploadFile(SupportedBroker broker)
    {
        long maxFileSize = 10 * 1024 * 1024;
        if (CurrentUpload is null)
            return;

        try
        {
            using (var stream = CurrentUpload.OpenReadStream(maxFileSize))
            {
                var buffer = new byte[CurrentUpload.Size];
                await stream.ReadAsync(buffer, 0, (int)CurrentUpload.Size);
                var stocks = ExcelService.ReadExcelFile(broker, buffer);
                var brokerStock = new BrokerWallet(broker.ToString(), stocks);
                AddBrokerStock(brokerStock);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Failed to read excel: {ex}", ex);
            errorMessage = $"Fehler beim laden der Datei";
        }
    }

    private void AddBrokerStock(BrokerWallet brokerStock)
    {
        if (BrokerStocks is null)
            BrokerStocks = new();
        int index = BrokerStocks.FindIndex(b => b.Name == brokerStock.Name);
        if (index != -1)
        {
            BrokerStocks[index] = brokerStock;
            return;
        }

        BrokerStocks.Add(brokerStock);
    }
}